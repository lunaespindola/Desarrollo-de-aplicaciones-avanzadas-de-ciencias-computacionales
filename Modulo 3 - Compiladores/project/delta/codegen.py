from arpeggio import PTNodeVisitor

class CodeGenerationVisitor(PTNodeVisitor):
    WAT_TEMPLATE = ''';; Code generated by the Delta compiler
(module
  (func
    (export "_start")
    (result i32)
{}  )
)
'''

    def __init__(self, symbol_table, **kwargs):
        super().__init__(**kwargs)
        self.__symbol_table = symbol_table

    def visit_program(self, node, children):
        return self.WAT_TEMPLATE.format(children[0])

    def visit_expression(self, node, children):
        return children[0]

    def visit_additive(self, node, children):
        result = children[0]
        for i in range(1, len(children), 2):
            operator = children[i]
            operand = children[i + 1]
            if operator == '+':
                result += operand
            else:
                result -= operand
        return result

    def visit_multiplicative(self, node, children):
        result = children[0]
        for i in range(1, len(children), 2):
            operator = children[i]
            operand = children[i + 1]
            if operator == '*':
                result *= operand
            else:
                result /= operand
        return result

    def visit_comparison(self, node, children):
        result = children[0]
        for i in range(1, len(children), 2):
            operator = children[i]
            operand = children[i + 1]
            if operator == '==':
                result = f'(i32.eq {result} {operand})'
            elif operator == '!=':
                result = f'(i32.ne {result} {operand})'
            elif operator == '>=':
                result = f'(i32.ge_s {result} {operand})'
            elif operator == '>':
                result = f'(i32.gt_s {result} {operand})'
            elif operator == '<=':
                result = f'(i32.le_s {result} {operand})'
            elif operator == '<':
                result = f'(i32.lt_s {result} {operand})'
        return result

    def visit_decimal(self, node, children):
        return f'i32.const {node.value}'

    def visit_binary(self, node, children):
        return f'i32.const {int(node.value[2:], 2)}'

    def visit_octal(self, node, children):
        return f'i32.const {int(node.value[2:], 8)}'

    def visit_hexadecimal(self, node, children):
        return f'i32.const {int(node.value[2:], 16)}'
